import sequelize from '../config/database.js';
import AppConfig from '../models/AppConfig.js';

const createAppConfigTable = async () => {
  try {
    console.log('üîß Cr√©ation de la table app_config...');
    
    // Cr√©er la table
    await AppConfig.sync({ force: false });
    
    // V√©rifier si la configuration du seuil de stock existe d√©j√†
    const existingConfig = await AppConfig.findOne({
      where: { configKey: 'low_stock_threshold' }
    });
    
    if (!existingConfig) {
      // Ins√©rer la configuration par d√©faut
      await AppConfig.create({
        configKey: 'low_stock_threshold',
        configValue: '10',
        description: 'Seuil de stock critique en dessous duquel une alerte est envoy√©e',
        dataType: 'number'
      });
      console.log('‚úÖ Configuration par d√©faut du seuil de stock cr√©√©e (10)');
    } else {
      console.log(`‚úÖ Configuration du seuil de stock existe d√©j√† (${existingConfig.configValue})`);
    }
    
    // Autres configurations par d√©faut
    const defaultConfigs = [
      {
        configKey: 'email_notifications_enabled',
        configValue: 'true',
        description: 'Activer ou d√©sactiver les notifications par email',
        dataType: 'boolean'
      },
      {
        configKey: 'newsletter_from_name',
        configValue: 'E-Commerce Store',
        description: 'Nom de l\'exp√©diteur pour les newsletters',
        dataType: 'string'
      },
      {
        configKey: 'auto_restock_alerts',
        configValue: 'true',
        description: 'Envoyer automatiquement des alertes de r√©approvisionnement',
        dataType: 'boolean'
      }
    ];
    
    for (const config of defaultConfigs) {
      const existing = await AppConfig.findOne({
        where: { configKey: config.configKey }
      });
      
      if (!existing) {
        await AppConfig.create(config);
        console.log(`‚úÖ Configuration ${config.configKey} cr√©√©e`);
      }
    }
    
    console.log('‚úÖ Table app_config et configurations par d√©faut cr√©√©es avec succ√®s');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la table app_config:', error);
    throw error;
  }
};

// Ex√©cuter la migration si ce fichier est appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  createAppConfigTable()
    .then(() => {
      console.log('Migration termin√©e');
      process.exit(0);
    })
    .catch((error) => {
      console.error('Migration √©chou√©e:', error);
      process.exit(1);
    });
}

export default createAppConfigTable; 