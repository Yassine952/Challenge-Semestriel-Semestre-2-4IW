// Script de test du flux de stock complet
import StockSyncService from './src/services/stockSyncService.js';
import Product from './src/models/Product.js';
import sequelize from './src/config/database.js';

async function testStockFlow() {
  try {
    console.log('üß™ Test du flux de stock complet\n');

    // 1. Cr√©er un produit de test
    const testProduct = await Product.create({
      name: 'Produit Test Stock',
      description: 'Test du syst√®me de stock',
      price: 29.99,
      stock: 100, // Stock initial
      category: 'Test',
      brand: 'TestBrand'
    });

    console.log(`‚úÖ Produit cr√©√©: ${testProduct.name} (Stock initial: ${testProduct.stock})`);

    // 2. Simuler ajout au panier (r√©servation)
    console.log('\nüì¶ Simulation: Ajout au panier...');
    const reservation = await StockSyncService.reserveStock(
      testProduct.id, 
      3, // Quantit√©
      1, // UserId
      999 // CartId
    );
    
    // V√©rifier le stock apr√®s r√©servation
    await testProduct.reload();
    console.log(`   Stock apr√®s r√©servation: ${testProduct.stock} (devrait √™tre 97)`);

    // 3. Simuler suppression du panier (lib√©ration)
    console.log('\nüóëÔ∏è Simulation: Suppression du panier...');
    const liberation = await StockSyncService.releaseStock(
      testProduct.id,
      3, // Quantit√©
      1, // UserId
      999 // CartId
    );

    // V√©rifier le stock apr√®s lib√©ration
    await testProduct.reload();
    console.log(`   Stock apr√®s lib√©ration: ${testProduct.stock} (devrait √™tre 100)`);

    // 4. Simuler √† nouveau ajout au panier
    console.log('\nüì¶ Simulation: Nouvel ajout au panier...');
    await StockSyncService.reserveStock(testProduct.id, 2, 1, 999);
    await testProduct.reload();
    console.log(`   Stock apr√®s nouvelle r√©servation: ${testProduct.stock} (devrait √™tre 98)`);

    // 5. Simuler confirmation de vente (paiement)
    console.log('\nüí≥ Simulation: Confirmation de vente...');
    const vente = await StockSyncService.confirmSale(
      testProduct.id,
      2, // Quantit√©
      1, // UserId
      888 // OrderId
    );

    // V√©rifier le stock apr√®s confirmation
    await testProduct.reload();
    console.log(`   Stock apr√®s confirmation vente: ${testProduct.stock} (devrait √™tre 98 - INCHANG√â)`);

    // 6. R√©sum√©
    console.log('\nüìä R√âSUM√â DU TEST:');
    console.log(`   Stock initial: 100`);
    console.log(`   Apr√®s r√©servation 3: 97 ‚úÖ`);
    console.log(`   Apr√®s lib√©ration 3: 100 ‚úÖ`);
    console.log(`   Apr√®s r√©servation 2: 98 ‚úÖ`);
    console.log(`   Apr√®s confirmation vente: 98 ‚úÖ (pas de double d√©duction)`);

    // 7. Nettoyer
    await testProduct.destroy();
    console.log('\nüßπ Produit de test supprim√©');

    console.log('\nüéâ Test r√©ussi ! Le syst√®me de stock fonctionne correctement.');
    process.exit(0);

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    process.exit(1);
  }
}

// Attendre que la DB soit pr√™te
sequelize.authenticate()
  .then(() => {
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');
    return testStockFlow();
  })
  .catch(err => {
    console.error('‚ùå Impossible de se connecter √† la base de donn√©es:', err);
    process.exit(1);
  }); 