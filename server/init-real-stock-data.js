// Initialisation du syst√®me de stock avec les vraies donn√©es
import sequelize from './src/config/database.js';
import StockHistory from './src/models/StockHistory.js';
import Product from './src/models/Product.js';

async function initRealStockData() {
  try {
    console.log('üöÄ Initialisation du syst√®me de stock avec vos vraies donn√©es...\n');

    // 1. V√©rifier la connexion
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // 2. Cr√©er/synchroniser la table StockHistory
    console.log('üìä Synchronisation de la table StockHistory...');
    await StockHistory.sync({ force: false }); // Ne pas √©craser si elle existe
    console.log('‚úÖ Table StockHistory pr√™te');

    // 3. V√©rifier s'il y a d√©j√† des donn√©es
    const existingMovements = await StockHistory.count();
    if (existingMovements > 0) {
      console.log(`‚ö†Ô∏è ${existingMovements} mouvements d√©j√† pr√©sents`);
      console.log('üóëÔ∏è Suppression des anciennes donn√©es pour recommencer...');
      await StockHistory.destroy({ where: {} });
    }

    // 4. R√©cup√©rer tous vos produits
    const products = await Product.findAll();
    console.log(`üì¶ ${products.length} produits trouv√©s dans votre base`);

    if (products.length === 0) {
      console.log('‚ùå Aucun produit trouv√©. Ajoutez des produits d\'abord.');
      process.exit(1);
    }

    // 5. Calculer le stock total
    const totalStock = products.reduce((sum, product) => sum + (product.stock || 0), 0);
    console.log(`üìä Stock total de vos produits: ${totalStock} unit√©s`);

    // 6. Cr√©er les mouvements initiaux pour chaque produit
    console.log('\nüìà Cr√©ation des mouvements de stock...');
    
    let totalMovements = 0;
    
    for (const product of products) {
      if (product.stock > 0) {
        console.log(`   ‚Ä¢ ${product.name}: ${product.stock} unit√©s`);

        // Mouvement initial (stock de base)
        await StockHistory.create({
          productId: product.id,
          userId: 1, // Admin par d√©faut
          movementType: 'initial',
          quantityBefore: 0,
          quantityChange: product.stock,
          quantityAfter: product.stock,
          reason: `Stock initial - ${product.name}`,
          cost: product.price * 0.6, // Co√ªt estim√© √† 60% du prix
          totalValue: product.stock * product.price,
          reference: `INIT_${product.id}`,
          createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Il y a 30 jours
          updatedAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
        });
        totalMovements++;

        // Cr√©er quelques mouvements historiques pour avoir un graphique
        const historicalMovements = [
          {
            days: 25,
            type: 'purchase',
            change: Math.floor(product.stock * 0.15),
            reason: 'R√©approvisionnement'
          },
          {
            days: 20,
            type: 'sale',
            change: -Math.floor(product.stock * 0.08),
            reason: 'Ventes'
          },
          {
            days: 15,
            type: 'purchase',
            change: Math.floor(product.stock * 0.10),
            reason: 'R√©approvisionnement'
          },
          {
            days: 10,
            type: 'sale',
            change: -Math.floor(product.stock * 0.06),
            reason: 'Ventes'
          },
          {
            days: 5,
            type: 'sale',
            change: -Math.floor(product.stock * 0.04),
            reason: 'Ventes r√©centes'
          }
        ];

        let runningStock = product.stock;
        
        for (const movement of historicalMovements) {
          if (movement.change !== 0) {
            const previousStock = runningStock - movement.change;
            const movementDate = new Date(Date.now() - movement.days * 24 * 60 * 60 * 1000);
            
            await StockHistory.create({
              productId: product.id,
              userId: 1,
              movementType: movement.type,
              quantityBefore: previousStock,
              quantityChange: movement.change,
              quantityAfter: runningStock,
              reason: movement.reason,
              cost: movement.type === 'purchase' ? product.price * 0.6 : null,
              totalValue: runningStock * product.price,
              reference: `HIST_${product.id}_${movement.days}D`,
              createdAt: movementDate,
              updatedAt: movementDate
            });
            totalMovements++;
          }
        }
      } else {
        console.log(`   ‚ö†Ô∏è ${product.name}: stock √† 0, ignor√©`);
      }
    }

    // 7. Statistiques finales
    console.log('\nüéâ Initialisation termin√©e !');
    console.log(`   üì¶ Produits trait√©s: ${products.length}`);
    console.log(`   üìä Stock total: ${totalStock} unit√©s`);
    console.log(`   üìà Mouvements cr√©√©s: ${totalMovements}`);
    
    console.log('\n‚úÖ Le dashboard devrait maintenant afficher:');
    console.log(`   üìä Stock Actuel: ${totalStock}`);
    console.log(`   üìà Graphique avec √©volution sur 30 jours`);
    console.log(`   üîÑ Donn√©es synchronis√©es PostgreSQL ‚Üî MongoDB`);

    console.log('\nüí° Actions √† faire maintenant:');
    console.log('   1. Rechargez votre dashboard');
    console.log('   2. V√©rifiez que les chiffres correspondent');
    console.log('   3. Testez l\'ajout/suppression au panier');

    process.exit(0);

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

initRealStockData(); 